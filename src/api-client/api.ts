/* tslint:disable */
/* eslint-disable */
/**
 * Set and Tune API
 * API for managing sets and tunes
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 *
 * @export
 * @interface BasicSetProperties
 */
export interface BasicSetProperties {
  /**
   * The name of the Set
   * @type {string}
   * @memberof BasicSetProperties
   */
  title: string;
  /**
   * A description of the Set
   * @type {string}
   * @memberof BasicSetProperties
   */
  description?: string;
  /**
   * The name of the creator of the set
   * @type {string}
   * @memberof BasicSetProperties
   */
  creator?: string;
}

/**
 *
 * @export
 * @interface CreateSet
 */
export interface CreateSet {
  /**
   * The name of the Set
   * @type {string}
   * @memberof CreateSet
   */
  title: string;
  /**
   * A description of the Set
   * @type {string}
   * @memberof CreateSet
   */
  description?: string;
  /**
   * The name of the creator of the set
   * @type {string}
   * @memberof CreateSet
   */
  creator?: string;
}

/**
 *
 * @export
 * @interface CreateTune
 */
export interface CreateTune {
  /**
   *
   * @type {string}
   * @memberof CreateTune
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateTune
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof CreateTune
   */
  timeSig?: string;
  /**
   *
   * @type {string}
   * @memberof CreateTune
   */
  composer?: string;
  /**
   *
   * @type {string}
   * @memberof CreateTune
   */
  arranger?: string;
}

/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   * HTTP status code
   * @type {number}
   * @memberof ModelError
   */
  code: number;
  /**
   *
   * @type {string}
   * @memberof ModelError
   */
  message: string;
}

/**
 * Called MusicSet and not only Set because of name clash in e.g. typescript
 * @export
 * @interface MusicSet
 */
export interface MusicSet {
  /**
   * Unique identifier for an object
   * @type {number}
   * @memberof MusicSet
   */
  id: number;
  /**
   * The name of the Set
   * @type {string}
   * @memberof MusicSet
   */
  title: string;
  /**
   * A description of the Set
   * @type {string}
   * @memberof MusicSet
   */
  description?: string;
  /**
   * The name of the creator of the set
   * @type {string}
   * @memberof MusicSet
   */
  creator?: string;
}

/**
 *
 * @export
 * @interface ObjectId
 */
export interface ObjectId {
  /**
   * Unique identifier for an object
   * @type {number}
   * @memberof ObjectId
   */
  id: number;
}

/**
 *
 * @export
 * @interface SetProperties
 */
export interface SetProperties {
  /**
   * The IDs of the Tunes in the Set
   * @type {Array<Tune>}
   * @memberof SetProperties
   */
  tunes?: Array<Tune>;
  /**
   * The name of the Set
   * @type {string}
   * @memberof SetProperties
   */
  title: string;
  /**
   * A description of the Set
   * @type {string}
   * @memberof SetProperties
   */
  description?: string;
  /**
   * The name of the creator of the set
   * @type {string}
   * @memberof SetProperties
   */
  creator?: string;
}

/**
 *
 * @export
 * @interface Tune
 */
export interface Tune {
  /**
   * Unique identifier for an object
   * @type {number}
   * @memberof Tune
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof Tune
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Tune
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Tune
   */
  timeSig?: string;
  /**
   *
   * @type {string}
   * @memberof Tune
   */
  composer?: string;
  /**
   *
   * @type {string}
   * @memberof Tune
   */
  arranger?: string;
}

/**
 *
 * @export
 * @interface TuneProperties
 */
export interface TuneProperties {
  /**
   *
   * @type {string}
   * @memberof TuneProperties
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof TuneProperties
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TuneProperties
   */
  timeSig?: string;
  /**
   *
   * @type {string}
   * @memberof TuneProperties
   */
  composer?: string;
  /**
   *
   * @type {string}
   * @memberof TuneProperties
   */
  arranger?: string;
}

/**
 *
 * @export
 * @interface UpdateSet
 */
export interface UpdateSet {
  /**
   * The name of the Set
   * @type {string}
   * @memberof UpdateSet
   */
  title: string;
  /**
   * A description of the Set
   * @type {string}
   * @memberof UpdateSet
   */
  description?: string;
  /**
   * The name of the creator of the set
   * @type {string}
   * @memberof UpdateSet
   */
  creator?: string;
}

/**
 *
 * @export
 * @interface UpdateTune
 */
export interface UpdateTune {
  /**
   *
   * @type {string}
   * @memberof UpdateTune
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof UpdateTune
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateTune
   */
  timeSig?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateTune
   */
  composer?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateTune
   */
  arranger?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Assign tunes to a set
     * @param {number} setId
     * @param {Array<number>} requestBody Array of tune IDs which should be the tunes of the set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignTunesToSet: async (setId: number, requestBody: Array<number>, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'setId' is not null or undefined
      if (setId === null || setId === undefined) {
        throw new RequiredError('setId', 'Required parameter setId was null or undefined when calling assignTunesToSet.');
      }
      // verify required parameter 'requestBody' is not null or undefined
      if (requestBody === null || requestBody === undefined) {
        throw new RequiredError('requestBody', 'Required parameter requestBody was null or undefined when calling assignTunesToSet.');
      }
      const localVarPath = `/sets/{setId}/tunes`
        .replace(`{${"setId"}}`, encodeURIComponent(String(setId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof requestBody !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(requestBody !== undefined ? requestBody : {})
        : (requestBody || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new set
     * @param {CreateSet} createSet Set object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSet: async (createSet: CreateSet, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'createSet' is not null or undefined
      if (createSet === null || createSet === undefined) {
        throw new RequiredError('createSet', 'Required parameter createSet was null or undefined when calling createSet.');
      }
      const localVarPath = `/sets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof createSet !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createSet !== undefined ? createSet : {})
        : (createSet || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new tune
     * @param {CreateTune} createTune Tune object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTune: async (createTune: CreateTune, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'createTune' is not null or undefined
      if (createTune === null || createTune === undefined) {
        throw new RequiredError('createTune', 'Required parameter createTune was null or undefined when calling createTune.');
      }
      const localVarPath = `/tunes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof createTune !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(createTune !== undefined ? createTune : {})
        : (createTune || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSet: async (setId: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'setId' is not null or undefined
      if (setId === null || setId === undefined) {
        throw new RequiredError('setId', 'Required parameter setId was null or undefined when calling deleteSet.');
      }
      const localVarPath = `/sets/{setId}`
        .replace(`{${"setId"}}`, encodeURIComponent(String(setId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTune: async (tuneId: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'tuneId' is not null or undefined
      if (tuneId === null || tuneId === undefined) {
        throw new RequiredError('tuneId', 'Required parameter tuneId was null or undefined when calling deleteTune.');
      }
      const localVarPath = `/tunes/{tuneId}`
        .replace(`{${"tuneId"}}`, encodeURIComponent(String(tuneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSet: async (setId: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'setId' is not null or undefined
      if (setId === null || setId === undefined) {
        throw new RequiredError('setId', 'Required parameter setId was null or undefined when calling getSet.');
      }
      const localVarPath = `/sets/{setId}`
        .replace(`{${"setId"}}`, encodeURIComponent(String(setId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTune: async (tuneId: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'tuneId' is not null or undefined
      if (tuneId === null || tuneId === undefined) {
        throw new RequiredError('tuneId', 'Required parameter tuneId was null or undefined when calling getTune.');
      }
      const localVarPath = `/tunes/{tuneId}`
        .replace(`{${"tuneId"}}`, encodeURIComponent(String(tuneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List all sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSets: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/sets`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List all tunes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTunes: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/tunes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a set by ID
     * @param {number} setId
     * @param {UpdateSet} updateSet Set object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSet: async (setId: number, updateSet: UpdateSet, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'setId' is not null or undefined
      if (setId === null || setId === undefined) {
        throw new RequiredError('setId', 'Required parameter setId was null or undefined when calling updateSet.');
      }
      // verify required parameter 'updateSet' is not null or undefined
      if (updateSet === null || updateSet === undefined) {
        throw new RequiredError('updateSet', 'Required parameter updateSet was null or undefined when calling updateSet.');
      }
      const localVarPath = `/sets/{setId}`
        .replace(`{${"setId"}}`, encodeURIComponent(String(setId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof updateSet !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(updateSet !== undefined ? updateSet : {})
        : (updateSet || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a tune by ID
     * @param {number} tuneId
     * @param {UpdateTune} updateTune Tune object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTune: async (tuneId: number, updateTune: UpdateTune, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'tuneId' is not null or undefined
      if (tuneId === null || tuneId === undefined) {
        throw new RequiredError('tuneId', 'Required parameter tuneId was null or undefined when calling updateTune.');
      }
      // verify required parameter 'updateTune' is not null or undefined
      if (updateTune === null || updateTune === undefined) {
        throw new RequiredError('updateTune', 'Required parameter updateTune was null or undefined when calling updateTune.');
      }
      const localVarPath = `/tunes/{tuneId}`
        .replace(`{${"tuneId"}}`, encodeURIComponent(String(tuneId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;


      localVarHeaderParameter['Content-Type'] = 'application/json';

      const queryParameters = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        queryParameters.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.query) {
        queryParameters.set(key, options.query[key]);
      }
      localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
      const nonString = typeof updateTune !== 'string';
      const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
        : nonString;
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(updateTune !== undefined ? updateTune : {})
        : (updateTune || "");

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Assign tunes to a set
     * @param {number} setId
     * @param {Array<number>} requestBody Array of tune IDs which should be the tunes of the set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async assignTunesToSet(setId: number, requestBody: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicSet>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).assignTunesToSet(setId, requestBody, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Create a new set
     * @param {CreateSet} createSet Set object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSet(createSet: CreateSet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicSet>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createSet(createSet, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Create a new tune
     * @param {CreateTune} createTune Tune object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTune(createTune: CreateTune, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tune>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createTune(createTune, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSet(setId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteSet(setId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Delete a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTune(tuneId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTune(tuneId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSet(setId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MusicSet>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSet(setId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Get a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTune(tuneId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tune>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTune(tuneId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List all sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSets(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MusicSet>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSets(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary List all tunes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listTunes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tune>>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listTunes(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update a set by ID
     * @param {number} setId
     * @param {UpdateSet} updateSet Set object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSet(setId: number, updateSet: UpdateSet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateSet(setId, updateSet, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @summary Update a tune by ID
     * @param {number} tuneId
     * @param {UpdateTune} updateTune Tune object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateTune(tuneId: number, updateTune: UpdateTune, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateTune(tuneId, updateTune, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
  }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     *
     * @summary Assign tunes to a set
     * @param {number} setId
     * @param {Array<number>} requestBody Array of tune IDs which should be the tunes of the set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignTunesToSet(setId: number, requestBody: Array<number>, options?: any): AxiosPromise<MusicSet> {
      return DefaultApiFp(configuration).assignTunesToSet(setId, requestBody, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new set
     * @param {CreateSet} createSet Set object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSet(createSet: CreateSet, options?: any): AxiosPromise<MusicSet> {
      return DefaultApiFp(configuration).createSet(createSet, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new tune
     * @param {CreateTune} createTune Tune object to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTune(createTune: CreateTune, options?: any): AxiosPromise<Tune> {
      return DefaultApiFp(configuration).createTune(createTune, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSet(setId: number, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration).deleteSet(setId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTune(tuneId: number, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration).deleteTune(tuneId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a set by ID
     * @param {number} setId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSet(setId: number, options?: any): AxiosPromise<MusicSet> {
      return DefaultApiFp(configuration).getSet(setId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a tune by ID
     * @param {number} tuneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTune(tuneId: number, options?: any): AxiosPromise<Tune> {
      return DefaultApiFp(configuration).getTune(tuneId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all sets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSets(options?: any): AxiosPromise<Array<MusicSet>> {
      return DefaultApiFp(configuration).listSets(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List all tunes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTunes(options?: any): AxiosPromise<Array<Tune>> {
      return DefaultApiFp(configuration).listTunes(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a set by ID
     * @param {number} setId
     * @param {UpdateSet} updateSet Set object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSet(setId: number, updateSet: UpdateSet, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration).updateSet(setId, updateSet, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a tune by ID
     * @param {number} tuneId
     * @param {UpdateTune} updateTune Tune object to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTune(tuneId: number, updateTune: UpdateTune, options?: any): AxiosPromise<void> {
      return DefaultApiFp(configuration).updateTune(tuneId, updateTune, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Assign tunes to a set
   * @param {number} setId
   * @param {Array<number>} requestBody Array of tune IDs which should be the tunes of the set
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public assignTunesToSet(setId: number, requestBody: Array<number>, options?: any) {
    return DefaultApiFp(this.configuration).assignTunesToSet(setId, requestBody, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new set
   * @param {CreateSet} createSet Set object to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createSet(createSet: CreateSet, options?: any) {
    return DefaultApiFp(this.configuration).createSet(createSet, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new tune
   * @param {CreateTune} createTune Tune object to be created
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public createTune(createTune: CreateTune, options?: any) {
    return DefaultApiFp(this.configuration).createTune(createTune, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a set by ID
   * @param {number} setId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteSet(setId: number, options?: any) {
    return DefaultApiFp(this.configuration).deleteSet(setId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a tune by ID
   * @param {number} tuneId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteTune(tuneId: number, options?: any) {
    return DefaultApiFp(this.configuration).deleteTune(tuneId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a set by ID
   * @param {number} setId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSet(setId: number, options?: any) {
    return DefaultApiFp(this.configuration).getSet(setId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a tune by ID
   * @param {number} tuneId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getTune(tuneId: number, options?: any) {
    return DefaultApiFp(this.configuration).getTune(tuneId, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all sets
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public listSets(options?: any) {
    return DefaultApiFp(this.configuration).listSets(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List all tunes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public listTunes(options?: any) {
    return DefaultApiFp(this.configuration).listTunes(options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a set by ID
   * @param {number} setId
   * @param {UpdateSet} updateSet Set object to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateSet(setId: number, updateSet: UpdateSet, options?: any) {
    return DefaultApiFp(this.configuration).updateSet(setId, updateSet, options).then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a tune by ID
   * @param {number} tuneId
   * @param {UpdateTune} updateTune Tune object to be updated
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateTune(tuneId: number, updateTune: UpdateTune, options?: any) {
    return DefaultApiFp(this.configuration).updateTune(tuneId, updateTune, options).then((request) => request(this.axios, this.basePath));
  }
}


